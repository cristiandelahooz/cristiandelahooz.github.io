var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stdin_exports = {};
__export(stdin_exports, {
  getMonorepoDirpath: () => getMonorepoDirpath
});
module.exports = __toCommonJS(stdin_exports);
var import_fs = __toESM(require("fs"));
var import_pathe = __toESM(require("pathe"));
var import_url = require("url");
function getMonorepoDirpath(curDirectory = process.cwd()) {
  curDirectory = curDirectory.startsWith("file://") ? (0, import_url.fileURLToPath)(curDirectory) : curDirectory;
  if (import_fs.default.statSync(curDirectory).isFile()) {
    curDirectory = import_pathe.default.dirname(curDirectory);
  }
  let maybeRoot;
  while (curDirectory !== "/" && curDirectory !== ".") {
    if (import_fs.default.existsSync(import_pathe.default.join(curDirectory, "package.json"))) {
      const packageJson = JSON.parse(
        import_fs.default.readFileSync(import_pathe.default.join(curDirectory, "package.json"), "utf8")
      );
      if (packageJson.workspaces !== void 0 || packageJson.root) {
        return curDirectory;
      } else {
        maybeRoot = curDirectory;
      }
    } else {
      const pnpmWorkspaceExists = import_fs.default.existsSync(
        import_pathe.default.join(curDirectory, "pnpm-workspace.yaml")
      );
      const pnpmLockExists = import_fs.default.existsSync(
        import_pathe.default.join(curDirectory, "pnpm-lock.yaml")
      );
      if (pnpmLockExists) {
        maybeRoot = curDirectory;
      }
      if (pnpmWorkspaceExists) {
        return curDirectory;
      }
    }
    curDirectory = import_pathe.default.dirname(curDirectory);
  }
  return maybeRoot;
}
